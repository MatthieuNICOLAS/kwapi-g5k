#!/usr/bin/env python
import httplib2
import numpy as np
from socket import getfqdn
from pprint import pformat, pprint
from time import time
from json import loads
from execo import logger, SshProcess, sleep, Host
from execo.log import style
from execo_g5k import OarSubmission, oarsub, get_current_oar_jobs, get_oar_job_info, \
    wait_oar_job_start, get_host_attributes, get_oar_job_nodes

logger.setLevel('INFO')

# Configuration
job_name = "Kwapi-check"
stress_time = 30
site = getfqdn().split('.')[1]
h = httplib2.Http()


# Retrieving job or submitting a new one
logger.info('Checking for a running job')
current_jobs = get_current_oar_jobs([site])
job_id = None
for job in current_jobs:
    info = get_oar_job_info(job[0], job[1])
    if info['name'] == job_name:
        job_id = job[0]
        break
if job_id:
    logger.info('Running job found, %s', job_id)
    job = (job_id, site)
    
else:
    logger.info('No running job, submitting a new one')
    job = oarsub([(OarSubmission(resources = "nodes=31", name=job_name, 
                                 job_type='allow_classic_ssh'), site)])[0]

logger.info('Waiting for job start')
wait_oar_job_start(job[0], job[1])
logger.info('Retrieving node list')
nodes = get_oar_job_nodes(job[0], job[1])




## Checking that all nodes have a probe declared in Kwapi configuration
resp, content = h.request("http://energy." + site + ".grid5000.fr:5000/probes/", "GET")
content = loads(content)


for node in nodes:
    if site + '.' + node.address.split('.')[0] not in content['probes']:
        logger.warning('%s is not declared in Kwapi', node)
        nodes.remove(node)
      

# nodes1 = [Host('stremi-12.reims.grid5000.fr')]

measures = {}
i = 1
for node in sorted(nodes):
    n_proc = get_host_attributes(node)['architecture']['smt_size']
    logger.info(str(i) + ' Host %s has %s cores', style.host(node.address), n_proc)
    ts = time()
    measures[ts] = {'stress': node.address}
    logger.info('Launching stress on ' + style.host(node.address))
    stress = SshProcess('killall stress; stress --cpu ' + str(n_proc) + ' --timeout '+ str(stress_time), node)
    while True:
        resp, content = h.request("http://energy." + site + ".grid5000.fr:5000/probes/", "GET")
        content = loads(content)
        if resp['status'] == '200':
            for probe, values in content['probes'].iteritems():
                if probe not in measures[ts]:
                    measures[ts][probe] = []
                measures[ts][probe].append(values['w'])
        if not stress.started:
            stress.start()        
        if stress.ended:
            i += 1
            break
        sleep(1)
    logger.info('Stress ended, analyzing results')
    if site + '.' + node.address.split('.')[0] in measures[ts]:
        try:
            measure = measures[ts][site + '.' + node.address.split('.')[0]]
            first = measure[0]
            last = measure[-1]
            med = np.median(measure)
            logger.info('%s: %s %s %s', node.address.split('.')[0], first, med, last)
            if abs(last - med) < abs(first - med) and last >= first:
                logger.info(style.user1('OK')+ " " + node.address )
            else:
                logger.info('Looking for a variation in other probes')
                for probe in sorted(map(lambda node: unicode(site + '.' + node.address.split('.')[0]), nodes)):
                    measure = measures[ts][probe]
                    first = measure[0]
                    last = measure[-1]
                    med = np.median(measure)
                    logger.debug('%s: %s %s %s', probe, first, med, last)
                    if abs(last - med) < abs(first - med) and last > first:
                        logger.error('Power from ' + node.address + 
                                ' is recorded by probe ' + probe) 
                        logger.info(probe + ': ' + pformat(measure))
                        break
                logger.error('No variation found on any probes, wrong record in API ?')
        except Exception, e: 
            logger.error('problem with probe ' + node.address.split('.')[0])
            print str(e)
    else:
        logger.error('probe %s is not monitored', node.address.split('.')[0])
        
    logger.info('Waiting for energy decrease')
    sleep(30)
    
    
    


        
    