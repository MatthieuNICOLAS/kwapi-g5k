#!/usr/bin/env python
# This file is part of kwapi-g5k
# 
# It allows to configure automatically the probes using the reference API
#


from socket import getfqdn
from pprint import pprint
from execo import Process, logger
from execo_g5k import get_site_clusters, get_cluster_hosts, get_host_attributes, get_resource_attributes


_community = 'public'
_protocol = '1'

# Determining site
site = getfqdn().split('.')[1]
# site = 'lyon'

logger.info('Generating configuration of kwapi-drivers for %s',
            site)

logger.info('Retrieving monitoring equipments information')
equips = {}
for pdu in get_resource_attributes('/sites/'+site+'/pdus/')['items']:
    if pdu.has_key('sensors'):
        for sensor in pdu['sensors']:
            if sensor.has_key('power'):
                if 'snmp' in sensor['power']:
                    if sensor['power']['per_outlets']:
                        oid = sensor['power']['snmp']['outlet_prefix_oid']
                    else:
                        oid = sensor['power']['snmp']['total_oids'][0][0:-2]
                    equips[pdu['uid']] = {'driver': 'Snmp', 'parameters': 
                        {'community': _community, 'protocol': '1',
                         'ip': pdu['uid'] + '.' + site + '.grid5000.fr',
                         'oid': oid }, 'mapping': [], 'probes': []}
                if 'wattmetre' in sensor['power']:
                    equips[pdu['uid']] = {'driver': 'Json_url', 'parameters': 
                        {'url': sensor['power']['wattmetre']['www']['url']},
                                        'probes': []}

#pprint(equips)                            
       
logger.info('Retrieving hosts plug mapping')
for cluster in get_site_clusters(site):
    nodes = get_resource_attributes('/sites/' + site + '/clusters/' + cluster + \
                                    '/nodes')['items']
    for node in nodes:
        if not node.has_key('sensors'):
            print node['uid']
            continue
        power = node['sensors']['power']
        
        if power['available']:
            if 'pdu' in power['via']:               
                if isinstance(power['via']['pdu'], list): 
                    for pdu in power['via']['pdu']:
                        if 'port' in pdu:     
                            equips[pdu['uid'].split('.')[0]]['mapping'].append((node['uid'], pdu['port']))
                        else:
                            if pdu['uid'] is None:
                                print power
                            else:
                                equips[pdu['uid'].split('.')[0]]['mapping'].append((node['uid'], 0))
                else:
                    pdu = power['via']['pdu']
                    if 'port' in pdu:
                        logger.warning('node ' + node['uid'] + ' has str instead of list for power[\'via\']')     
                        equips[pdu['uid'].split('.')[0]]['mapping'].append((node['uid'], pdu['port']))
                    else:
                        equips[pdu['uid'].split('.')[0]]['mapping'].append((node['uid'], 0))
            if 'www' in power['via']:
                if not 'per_outlets' in power or power['per_outlets']:  
                    equips[pdu['uid']]['probes'].append(node['uid'])


# pprint(equips)    

logger.info('Generating probe list for Snmp drivers') 
for equip in equips.itervalues():
    if 'mapping' in equip and len(equip['mapping']) > 0:
        if len(filter(lambda x: x[1] != 0, equip['mapping'])) > 0:
            equip['mapping'] = sorted(equip['mapping'], key=lambda x: x[1])
            equip['probes'] = [None] * equip['mapping'][-1][1]        
            for probe, outlet in equip['mapping']:
                equip['probes'][outlet-1] = probe
        else:
            cluster = equip['mapping'][0][0].split('-')[0]
            radicals = map(lambda x: int(x[0].split('-')[1]), equip['mapping'])
            equip['probes'].append(cluster + '-' + '-'.join(map(str, sorted(radicals))))
            
# pprint(equips)    

logger.info('Writing new configuration file')
f = open('/tmp/kwapi-drivers-list.conf', 'w')
for equip, data in equips.iteritems():
    if 'probes' in data and data['probes']:
        sec = "\n["+equip+"]\n"
        sec += "probes = ["
        for probe in data['probes']:
            if probe:
                sec += "'" + site + '.' + probe +"'"
            else:
                sec += str(None)
            sec += ", "
        sec += "]\n"
        sec += "driver = "+data['driver']+"\n"
        sec += "parameters = "+str(data['parameters']) + "\n"
        f.write(sec)

f.close()


logger.info('Adding drivers from API to /etc/kwapi/drivers.conf')
bak_conf = Process('[ -f /etc/kwapi/drivers.conf.orig ] && cp /etc/kwapi/drivers.conf.orig /etc/kwapi/drivers.conf || cp /etc/kwapi/drivers.conf /etc/kwapi/drivers.conf.orig')
bak_conf.shell = True
bak_conf.run()
cat_conf = Process('cat /tmp/kwapi-drivers-list.conf >> /etc/kwapi/drivers.conf ; rm /tmp/kwapi-drivers-list.conf')
cat_conf.shell = True
cat_conf.run()

logger.info('Done')