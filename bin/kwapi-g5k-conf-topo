#!/usr/bin/env python
# This file is part of kwapi-g5k
# 
# It allows to configure automatically the probes using the reference API
#


from socket import getfqdn
from pprint import pprint
from execo import Process, logger
from execo_g5k import get_site_clusters, get_cluster_hosts, get_host_attributes, get_resource_attributes


_community = 'public'
_protocol = '2c'

# Determining site
site = getfqdn().split('.')[1]
# site = 'lyon'

logger.info('Generating configuration of kwapi-drivers for %s',
            site)

logger.info('Retrieving monitoring equipments information')
equips = {}

logger.info('Retrieving network equipments information')
switchs = {}
for network_equipment in get_resource_attributes('/sites/'+site+'/network_equipments/')['items']:
    if network_equipment.has_key('type'):
        if network_equipment['type'] == 'network_equipment':
            if network_equipment.has_key('uid'):
                switch = network_equipment['uid']
                l = -1
                if network_equipment.has_key('linecards'):
                    for linecard in network_equipment['linecards']:
                        l+=1
                        snmp_pattern = None
                        if linecard.has_key('snmp_pattern'):
                            snmp_pattern = linecard['snmp_pattern']
                        else:
                            logger.warn("No snmp_pattern for %s: %s" % (switch, l))
                            continue
                        p = -1
                        if linecard.has_key('ports'):
                            ports = linecard['ports']
                            for port in ports:
                                p+=1
                                uid = None
                                device_port = ""
                                if port.has_key('uid'):
                                    uid = port['uid']
                                    if port.has_key('port'):
                                        device_port = '-' + port['port']
                                try:
                                    device = uid + device_port if uid else None
                                    #switch_port = snmp_pattern.replace('%LINECARD%', str(l)).replace('%PORT%', str(p))
                                    #if uid:
                                    if switchs.has_key(switch):
                                        switchs[switch].append(device)
                                    else:
                                        switchs[switch] = [device]
                                except:
                                    logger.error("Can't write %s:%s:%d:%d:%s" % (switch, snmp_pattern, l, p, uid))
#pprint(switchs)
#pprint(equips)                            
       
network_probes = {}
topo = {}
for switch in switchs:
    #Exclude some switchs
    if switch.endswith("ib") or switch in ["", None, "sgrelon1"]:
        logger.warn("Ignore switch: %s" % switch)
    else:
        switch_addr = "%s.%s" % (site, switch)
        probesIN = []
        probesOUT = []
        topo[switch_addr] = []
        for node in switchs[switch]:
            if node:
                topo[switch_addr].append("%s.%s" % (site, node))
                probesIN.append("%s.%s_%s" % (site, switch, node))
                probesOUT.append("%s.%s_%s" % (site, node, switch))
            else:
                probesIN.append(None)
                probesOUT.append(None)
        #Erase last None values 
        while not probesIN[-1]:
            probesIN.pop()
        while not probesOUT[-1]:
            probesOUT.pop()
        if len(probesIN) == 0 or len(probesOUT) == 0:
            logger.warn("No probes on switch %s" % switch)
            continue
        else:
            network_probes[switch] = {'in':probesIN,
                                      'out':probesOUT,}

# pprint(topo)
# pprint(equips)    
# pprint(network_probes)
logger.info('Writing new configuration file')

f = open('/tmp/kwapi-live-topo.conf', 'w')
f.write("\n[TOPO]\n")
f.write("topo=")
f.write(str(topo))
f.flush()
f.close()

logger.info('Adding topology to /etc/kwapi/live.conf')
bak_conf = Process('[ -f /etc/kwapi/live.conf.orig ] && cp /etc/kwapi/live.conf.orig /etc/kwapi/live.conf || cp /etc/kwapi/live.conf /etc/kwapi/live.conf.orig')
bak_conf.shell = True
bak_conf.run()
cat_conf = Process('cat /tmp/kwapi-live-topo.conf >> /etc/kwapi/live.conf ; rm /tmp/kwapi-live-topo.conf')
cat_conf.shell = True
cat_conf.run()

logger.info('Done')
