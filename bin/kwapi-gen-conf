#!/usr/bin/env python
#from socket import getfqdn
import socket
from execo import Process, logger
from execo_g5k import get_site_clusters, get_cluster_hosts, get_host_attributes

logger.info('Adding drivers from API to /etc/kwapi/drivers.conf')

logger.warning('Using dummy value for community, driver and oid, before g5k api provides these informations')
_community = 'public'

_raritan_oid = '1.3.6.1.4.1.13742.4.1.2.2.1.7'


ip = socket.gethostbyname(socket.gethostname())
get_ip = Process('host '+ip).run()
site = get_ip.stdout.split(" ")[-1].strip().split('.')[1]

drivers = {'reims': 'Snmp', 'lyon': 'Json_url'}

logger.info('Retrieving hosts plug mapping')
sections = {}

if drivers[site] == 'Snmp':
    # Retrieving pdu port - host name mapping
    mapping = {}
    for cluster in get_site_clusters(site):
        for node in get_cluster_hosts(cluster):
            attr = get_host_attributes(node)["sensors"]["power"]["via"]["pdu"]
            sec_name = attr["uid"].split('.')[0]
            if sec_name not in sections:
                sections[sec_name] = {'driver': drivers[site],
                    'parameters': {'community': _community, 'ip': attr["uid"],
                    'oid': _raritan_oid, 'protocol': '1'}}
                mapping[sec_name] = []
            node = site+'.'+node.split('.')[0]
            mapping[sec_name].append( (node, attr["port"]) )

    for sec_name in sections.keys():
        mapping[sec_name] = sorted(mapping[sec_name], key=lambda x: x[1])
        # Generating probe list
        probes = []
        i_probe = 1
        for probe, outlet in mapping[sec_name]:
            if outlet == i_probe:
                probes.append(probe)
            else:
                probes.append(None)
            i_probe += 1
        sections[sec_name]['probes'] = probes


elif drivers[site] == 'Json_url':
    sections['wattmetre'] = {'driver': drivers[site],
                    'parameters': {'url': 'http://wattmetre.lyon.grid5000.fr/GetWatts-json.php'}}
    probes = []
    for cluster in get_site_clusters(site):
        for node in get_cluster_hosts(cluster):
            probes.append(node.split('.')[0])
    sections['wattmetre']['probes'] = probes



logger.info('Writing new config')
f = open('/tmp/kwapi-drivers-list.conf', 'w')
for sec_name, data in sections.iteritems():
    sec = "["+sec_name+"]\n"
    sec += "probes = ["
    for probe in probes:
        if probe:
            sec += "'"+probe+"'"
        else:
            sec += str(None)
        sec += ", "
    sec += "]\n"
    sec += "driver = "+data['driver']+"\n"
    sec += "parameters = "+str(data['parameters'])+"\n\n"
    f.write(sec)

f.close()

bak_conf = Process('[ -f /etc/kwapi/drivers.conf.orig ] && cp /etc/kwapi/drivers.conf.orig /etc/kwapi/drivers.conf || cp /etc/kwapi/drivers.conf /etc/kwapi/drivers.conf.orig')
bak_conf.shell = True
bak_conf.run()
cat_conf = Process('cat /tmp/kwapi-drivers-list.conf >> /etc/kwapi/drivers.conf ; rm /tmp/kwapi-drivers-list.conf')
cat_conf.shell = True
cat_conf.run()

logger.info('Done')