#!/usr/bin/env python
#from socket import getfqdn
from execo import Process, logger
from execo_g5k import get_cluster_hosts, get_host_attributes

logger.info('Adding drivers from API to /etc/kwapi/drivers.conf')

logger.warning('Using dummy value for community, driver and oid, before g5k api provides these informations')
_community = 'public'
_driver = 'Snmp'
_raritan_oid = '1.3.6.1.4.1.13742.4.1.2.2.1.7'


logger.info('Retrieving hosts plug mapping')
equips = {}
for node in get_cluster_hosts('stremi'):
    attr = get_host_attributes(node)["sensors"]["power"]["via"]["pdu"]
    sec_name = attr["uid"].split('.')[0]
    tmp_node = node.split('.')
    node = tmp_node[1]+'.'+tmp_node[0]
    if sec_name not in equips:
        equips[sec_name] = {'driver': _driver, 'mapping': [ (node, attr["port"])  ],
            'parameters': {'community': _community, 'ip': attr["uid"],
            'oid': _raritan_oid, 'protocol': '1'} }
    else:
        equips[sec_name]['mapping'].append( (node, attr["port"]) )


logger.info('Writing new config')
f = open('/tmp/kwapi-drivers-list.conf', 'w')
for sec_name, data in equips.iteritems():
    sec = "["+sec_name+"]\n"
    mapping = sorted(data['mapping'], key=lambda x: x[1])
    probes = []
    i_probe = 1
    for probe, outlet in mapping:
        if outlet == i_probe:
            probes.append(probe)
        else:
            probes.append(None)
        i_probe += 1
    sec += "probes = ["
    for probe in probes:
        if probe:
            sec += "'"+probe+"'"
        else:
            sec += str(None)
        sec += ", "
    sec += "]\n"
    sec += "driver = "+data['driver']+"\n"
    sec += "parameters = "+str(data['parameters'])+"\n\n"
    f.write(sec)

f.close()

bak_conf = Process('[ -f /etc/kwapi/drivers.conf.orig ] && cp /etc/kwapi/drivers.conf.orig /etc/kwapi/drivers.conf || cp /etc/kwapi/drivers.conf /etc/kwapi/drivers.conf.orig').run()
cat_conf = Process('cat /tmp/kwapi-drivers-list.conf >> /etc/kwapi/drivers.conf ; rm /tmp/kwapi-drivers-list.conf')
cat_conf.shell = True
cat_conf.run()

logger.info('Done')